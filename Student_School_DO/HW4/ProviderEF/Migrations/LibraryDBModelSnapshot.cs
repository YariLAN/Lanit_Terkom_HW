// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProviderEF;

#nullable disable

namespace ProviderEF.Migrations
{
    [DbContext(typeof(LibraryDB))]
    partial class LibraryDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntitiesEF.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("author");

                    b.Property<int>("CollateralValue")
                        .HasColumnType("int")
                        .HasColumnName("collateral_value");

                    b.Property<int>("CountBook")
                        .HasColumnType("int")
                        .HasColumnName("count_book");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("id_genre");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name_book");

                    b.Property<int>("RentalCost")
                        .HasColumnType("int")
                        .HasColumnName("rental_cost");

                    b.HasKey("BookId")
                        .HasName("id_book");

                    b.HasIndex("GenreId");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("EntitiesEF.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId")
                        .HasName("id_category");

                    b.ToTable("categories_books", (string)null);
                });

            modelBuilder.Entity("EntitiesEF.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name_genre");

                    b.HasKey("GenreId")
                        .HasName("id_genre");

                    b.ToTable("genre_type", (string)null);
                });

            modelBuilder.Entity("EntitiesEF.Issued", b =>
                {
                    b.Property<Guid>("IssuedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_book");

                    b.Property<DateTime>("DateDue")
                        .HasColumnType("date")
                        .HasColumnName("date_due");

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("date")
                        .HasColumnName("date_issue");

                    b.Property<Guid>("ReaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_reader");

                    b.HasKey("IssuedId")
                        .HasName("id_issued");

                    b.HasIndex("BookId");

                    b.HasIndex("ReaderId");

                    b.ToTable("issued", (string)null);
                });

            modelBuilder.Entity("EntitiesEF.Reader", b =>
                {
                    b.Property<Guid>("ReaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("adress");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("id_category");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("patronymic");

                    b.HasKey("ReaderId")
                        .HasName("id_reader");

                    b.HasIndex("CategoryId");

                    b.ToTable("readers", (string)null);
                });

            modelBuilder.Entity("EntitiesEF.Book", b =>
                {
                    b.HasOne("EntitiesEF.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("EntitiesEF.Issued", b =>
                {
                    b.HasOne("EntitiesEF.Book", "Book")
                        .WithMany("Issueds")
                        .HasForeignKey("BookId")
                        .IsRequired();

                    b.HasOne("EntitiesEF.Reader", "Reader")
                        .WithMany("Issueds")
                        .HasForeignKey("ReaderId")
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("EntitiesEF.Reader", b =>
                {
                    b.HasOne("EntitiesEF.Category", "Category")
                        .WithMany("Readers")
                        .HasForeignKey("CategoryId")
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EntitiesEF.Book", b =>
                {
                    b.Navigation("Issueds");
                });

            modelBuilder.Entity("EntitiesEF.Category", b =>
                {
                    b.Navigation("Readers");
                });

            modelBuilder.Entity("EntitiesEF.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("EntitiesEF.Reader", b =>
                {
                    b.Navigation("Issueds");
                });
#pragma warning restore 612, 618
        }
    }
}
